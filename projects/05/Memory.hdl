// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    // 0b0...
    Not(in=address[0], out=sm);
    And(a=sm, b=load, out=loadm);

    Xor(a=address[0], b=1, out=x01);
    Xor(a=address[1], b=0, out=x10);
    Xor(a=address[1], b=1, out=x11);
    Xor(a=address[2], b=0, out=x20);
    Xor(a=address[2], b=1, out=x21);

    // 0b10...
    Or(a=x01, b=x10, out=ssx);
    // 0b100_...
    Or(a=ssx, b=x20, out=ss0n);
    Not(in=ss0n, out=ss0);
    And(a=ss0, b=load, out=loads0);
    // 0b101_...
    Or(a=ssx, b=x21, out=ss1n);
    Not(in=ss1n, out=ss1);
    And(a=ss1, b=load, out=loads1);

    // 0b110_0000_0000_0000
    // 0bxx0_....0
    Or8Way(in=address[7..14], out=xx0);
    Or8Way(in=address[2..6], out=xx1);
    Or(a=xx0, b=xx1, out=xx);
    
    Or(a=xx, b=x11, out=sk0);
    Or(a=sk0, b=x01, out=skn);
    Not(in=skn, out=sk);
    And(a=sk, b=load, out=loadk);

    RAM16K(in=in, load=loadm, address=address[1..14], out=outm);
    RAM4K(in=in, load=loads0, address=address[3..14], out=outs0);
    RAM4K(in=in, load=loads1, address=address[3..14], out=outs1);
    Register(in=in, load=loadk, out=outk);

    Mux16(a=outs0, b=outm, sel=sm, out=out0);
    Mux16(a=outs1, b=out0, sel=ss0, out=out1);
}