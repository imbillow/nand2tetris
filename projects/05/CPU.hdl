// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location.
 *
 * If the current instruction needs to write a value to M, the value
 *  is placed in outM, the address of the target location is placed in
 *  the addressM output, and the writeM control bit is asserted.
 *  (When writeM==0, any value may appear in outM).
 *
 * The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction.
 * The addressM and pc outputs are clocked: although they are affected
 * by the execution of the current instruction, they commit to their
 * new values only in the next time step. If reset==1 then the CPU
 * jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A
    Not(in=instruction[15], out=loadAIns);
    // store outALU to A, instruction[5]
    And(a=instruction[15], b=instruction[5], out=loadAoutALU);
    Or(a=loadAIns, b=loadAoutALU, out=loadA);
    Mux16(a=outALU, b[0..14]=instruction[0..14], sel=loadAIns, out=inA);
    Register(in=inA, load=loadA, out=outA);
    // D
    And(a=instruction[15], b=instruction[4], out=loadD);
    Register(in=outALU, load=loadD, out=outD);

    PC(in=outA, load=jmp, inc=true, reset=reset, out[0..14]=pc);

    // if a == 1(instruction[12]), valY = inM else outA
    Mux16(a=outA, b=inM, sel=instruction[12], out=valY);

    // c[1..6](instruction[11..6])
    ALU(x=outD, y=valY,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f =instruction[7],
        no=instruction[6],
        out=outALU, zr=zr, ng=ng);

    // dest[1..3](instruction[5..3])
    // A, D, M
    And(a=instruction[15], b=instruction[3], out=writeM, out=selM);
    Mux16(a=false, b=outALU, sel=selM, out=outM);
    Or16(a=outA, b=false, out[0..14]=addressM);

    // jump(instruction[2..0])
    Not(in=ng, out=ngn);
    Not(in=zr, out=zrn);
    And(a=ngn, b=zrn, out=po);
    And(a=instruction[0], b=po, out=jgt);
    And(a=instruction[1], b=zr, out=jeq);
    And(a=instruction[2], b=ng, out=jlt);
    Or(a=jgt, b=jeq, out=jge);
    Or(a=jge, b=jlt, out=jmp0);
    And(a=instruction[15], b=jmp0, out=jmp);
}